package com.automatizacion.proyecto.pruebas;

import com.automatizacion.proyecto.base.BaseTest;
import com.automatizacion.proyecto.paginas.PaginaLogin;
import org.testng.Assert;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

/**
 * Pruebas de Login - VERSI√ìN CORREGIDA
 * @author Roberto Rivas Lopez
 */
public class PruebasLogin extends BaseTest {
    
    private PaginaLogin paginaLogin;
    
    @BeforeMethod
    public void configurarPagina() {
        System.out.println("\n" + "=".repeat(60));
        System.out.println("üîß CONFIGURANDO PRUEBA DE LOGIN");
        System.out.println("=".repeat(60));
        
        String urlLogin = "https://practice.expandtesting.com/login";
        System.out.println("üåê Navegando a: " + urlLogin);
        
        obtenerDriver().get(urlLogin);
        
        // Esperar que la p√°gina cargue
        try {
            Thread.sleep(3000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        
        paginaLogin = new PaginaLogin(obtenerDriver(), obtenerEsperaExplicita());
        
        // Verificar que la p√°gina carg√≥ - CON LOGGING DETALLADO
        boolean paginaVisible = paginaLogin.esPaginaVisible();
        System.out.println("‚úÖ P√°gina visible: " + paginaVisible);
        
        if (!paginaVisible) {
            // Capturar pantalla para debug
            obtenerGestorCaptura().capturarPantalla(obtenerDriver(), "error_pagina_no_visible");
            System.out.println("üì∏ Captura guardada para debug");
        }
        
        Assert.assertTrue(paginaVisible, "La p√°gina de login debe estar visible");
        System.out.println("‚úÖ Configuraci√≥n completada\n");
    }
    
    @Test(description = "Login exitoso con credenciales v√°lidas")
    public void testLoginExitoso() {
        System.out.println("\nüß™ TEST: Login Exitoso");
        System.out.println("-".repeat(30));
        
        // Usar credenciales de la p√°gina de pr√°ctica
        paginaLogin.realizarLogin("practice", "SuperSecretPassword!");
        
        // Verificar resultado
        String urlActual = obtenerDriver().getCurrentUrl();
        System.out.println("üìç URL despu√©s del login: " + urlActual);
        
        // Capturar pantalla del resultado
        obtenerGestorCaptura().capturarPantalla(obtenerDriver(), "login_exitoso");
        
        // Verificar que se redirigi√≥ a p√°gina segura
        boolean loginExitoso = urlActual.contains("secure") || !urlActual.contains("login");
        System.out.println("‚úÖ Login exitoso: " + loginExitoso);
        
        Assert.assertTrue(loginExitoso, "Deber√≠a redirigir a √°rea segura");
    }
    
    @Test(description = "Login con credenciales inv√°lidas")
    public void testLoginCredencialesInvalidas() {
        System.out.println("\nüß™ TEST: Credenciales Inv√°lidas");
        System.out.println("-".repeat(30));
        
        paginaLogin.realizarLogin("usuario_invalido", "password_invalido");
        
        // Verificar mensaje de error
        String mensajeFlash = paginaLogin.obtenerMensajeFlash();
        String urlActual = obtenerDriver().getCurrentUrl();
        
        System.out.println("üí¨ Mensaje: " + mensajeFlash);
        System.out.println("üìç URL: " + urlActual);
        
        // Capturar pantalla del error
        obtenerGestorCaptura().capturarPantalla(obtenerDriver(), "login_error");
        
        // Verificar que NO se logue√≥
        boolean seQuedoEnLogin = urlActual.contains("login");
        System.out.println("‚ùå Se qued√≥ en login: " + seQuedoEnLogin);
        
        Assert.assertTrue(seQuedoEnLogin || !mensajeFlash.isEmpty(), 
            "Deber√≠a mostrar error o permanecer en login");
    }
    
    @Test(description = "Campos vac√≠os")
    public void testCamposVacios() {
        System.out.println("\nüß™ TEST: Campos Vac√≠os");
        System.out.println("-".repeat(30));
        
        paginaLogin.realizarLogin("", "");
        
        String urlActual = obtenerDriver().getCurrentUrl();
        System.out.println("üìç URL: " + urlActual);
        
        // Capturar pantalla
        obtenerGestorCaptura().capturarPantalla(obtenerDriver(), "campos_vacios");
        
        boolean seQuedoEnLogin = urlActual.contains("login");
        Assert.assertTrue(seQuedoEnLogin, "Deber√≠a permanecer en p√°gina de login");
    }
    
    @Test(description = "Verificar elementos de la p√°gina")
    public void testElementosPagina() {
        System.out.println("\nüß™ TEST: Elementos de P√°gina");
        System.out.println("-".repeat(30));
        
        boolean elementosValidos = paginaLogin.validarElementosPagina();
        String titulo = paginaLogin.obtenerTitulo();
        
        System.out.println("üìã T√≠tulo: " + titulo);
        System.out.println("‚úÖ Elementos v√°lidos: " + elementosValidos);
        
        // Capturar pantalla de la p√°gina
        obtenerGestorCaptura().capturarPantalla(obtenerDriver(), "elementos_pagina");
        
        Assert.assertTrue(elementosValidos, "Todos los elementos deber√≠an estar presentes");
        Assert.assertTrue(titulo.toLowerCase().contains("login"), "T√≠tulo deber√≠a contener 'login'");
    }
}
